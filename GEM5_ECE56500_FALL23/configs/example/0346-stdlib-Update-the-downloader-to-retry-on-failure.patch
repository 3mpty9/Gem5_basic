From 02f22d65a77ff107f22cba2895ea1536a3b6a446 Mon Sep 17 00:00:00 2001
From: "Bobby R. Bruce" <bbruce@ucdavis.edu>
Date: Wed, 2 Mar 2022 11:15:35 -0800
Subject: [PATCH 346/757] stdlib: Update the downloader to retry on failure

On occasion HTTP status codes, such as 429, are returned when
downloading the resources and/or the "resources.json" file. In such
cases it makes sense to retry the download.

This patch adds a Truncated Exponential Backoff algorithm to the
downloader to retry downloads, with a default maximum of 6 attempts.
This is done in cases where HTTP status codes 408, 429, and 5xx are
returned.

So this feature is applied to both the retrieval of the resources and
the "resource.json" file, the downloading of the "resources.json" file
has been modified to utilize the `_download` function as is used to
download resources

Change-Id: Ic4444b52f0f71d294fccec9de3140beece5f7576
Reviewed-on: https://gem5-review.googlesource.com/c/public/gem5/+/57274
Reviewed-by: Bobby Bruce <bbruce@ucdavis.edu>
Maintainer: Bobby Bruce <bbruce@ucdavis.edu>
Reviewed-by: Jason Lowe-Power <power.jg@gmail.com>
Tested-by: kokoro <noreply+kokoro@google.com>
---
 src/python/gem5/resources/downloader.py | 88 ++++++++++++++++++++++++++++-----
 1 file changed, 75 insertions(+), 13 deletions(-)

diff --git a/src/python/gem5/resources/downloader.py b/src/python/gem5/resources/downloader.py
index 5afceeb..239860c 100644
--- a/src/python/gem5/resources/downloader.py
+++ b/src/python/gem5/resources/downloader.py
@@ -32,6 +32,10 @@ import shutil
 import gzip
 import hashlib
 import base64
+import time
+import random
+from tempfile import gettempdir
+from urllib.error import HTTPError
 from typing import List, Dict
 
 from ..utils.filelock import FileLock
@@ -55,6 +59,33 @@ def _get_resources_json_uri() -> str:
 
     return uri
 
+def _get_resources_json_at_url(url: str) -> Dict:
+    '''
+    Returns a resource JSON, in the form of a Python Dict. The URL location
+    of the JSON must be specified.
+
+    **Note**: The URL is assumed to be the location within a Google Source
+    repository. Special processing is done to handle this. This is the primary
+    reason there are separate functions for handling the retrieving of the
+    resources JSON comapared to just using the `_download` function directly.
+
+    :param url: The URL of the JSON file.
+    '''
+
+    file_path = os.path.join(
+        gettempdir(),
+        f"gem5-resources-{hashlib.md5(url.encode()).hexdigest()}.base64",
+    )
+
+    _download(url, file_path)
+
+    # Note: Google Source does not properly support obtaining files as raw
+    # text. Therefore when we open the URL we receive the JSON in base64
+    # format. Conversion is needed before it can be loaded.
+    with open(file_path) as file:
+        to_return = json.loads(base64.b64decode(file.read()).decode("utf-8"))
+
+    return to_return
 
 def _get_resources_json() -> Dict:
     """
@@ -63,23 +94,16 @@ def _get_resources_json() -> Dict:
     :returns: The Resources JSON (as a Python Dictionary).
     """
 
-    # Note: Google Source does not properly support obtaining files as raw
-    # text. Therefore when we open the URL we receive the JSON in base64
-    # format. Conversion is needed before it can be loaded.
-    with urllib.request.urlopen(_get_resources_json_uri()) as url:
-        to_return = json.loads(base64.b64decode(url.read()).decode("utf-8"))
+    to_return = _get_resources_json_at_url(url = _get_resources_json_uri())
 
     # If the current version pulled is not correct, look up the
     # "previous-versions" field to find the correct one.
     version = _resources_json_version_required()
     if to_return["version"] != version:
         if version in to_return["previous-versions"].keys():
-            with urllib.request.urlopen(
-                    to_return["previous-versions"][version]
-                ) as url:
-                to_return = json.loads(
-                    base64.b64decode(url.read()).decode("utf-8")
-                )
+            to_return = _get_resources_json_at_url(
+                url = to_return["previous-versions"][version]
+            )
         else:
             # This should never happen, but we thrown an exception to explain
             # that we can't find the version.
@@ -170,18 +194,56 @@ def _get_md5(file: str) -> str:
     return md5_object.hexdigest()
 
 
-def _download(url: str, download_to: str) -> None:
+def _download(
+    url: str,
+    download_to: str,
+    max_attempts: int = 6,
+) -> None:
     """
     Downloads a file.
 
+    The function will run a Truncated Exponential Backoff algorithm to retry
+    the download if the HTTP Status Code returned is deemed retryable.
+
     :param url: The URL of the file to download.
 
     :param download_to: The location the downloaded file is to be stored.
+
+    :param max_attempts: The max number of download attempts before stopping.
+    The default is 6. This translates to roughly 1 minute of retrying before
+    stopping.
     """
 
     # TODO: This whole setup will only work for single files we can get via
     # wget. We also need to support git clones going forward.
-    urllib.request.urlretrieve(url, download_to)
+
+
+    attempt = 0
+    while True:
+        # The loop will be broken on a successful download, via a `return`, or
+        # if an exception is raised. An exception will be raised if the maximum
+        # number of download attempts has been reached or if a HTTP status code
+        # other than 408, 429, or 5xx is received.
+        try:
+            urllib.request.urlretrieve(url, download_to)
+            return
+        except HTTPError as e:
+            # If the error code retrieved is retryable, we retry using a
+            # Truncated Exponential backoff algorithm, truncating after
+            # "max_attempts". We consider HTTP status codes 408, 429, and 5xx
+            # as retryable. If any other is retrieved we raise the error.
+            if e.code in (408, 429) or 500 <= e.code < 600:
+                attempt += 1
+                if attempt >= max_attempts:
+                    raise Exception(
+                        f"After {attempt} attempts, the resource json could "
+                        "not be retrieved. HTTP Status Code retrieved: "
+                        f"{e.code}"
+                    )
+                time.sleep((2 ** attempt) + random.uniform(0, 1))
+            else:
+                raise e
+
 
 
 def list_resources() -> List[str]:
-- 
1.8.3.1

