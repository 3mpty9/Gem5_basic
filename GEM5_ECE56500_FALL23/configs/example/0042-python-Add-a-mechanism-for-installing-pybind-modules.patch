From 4f987ff52d5c3e35b4fd9d9707ca80653154b2df Mon Sep 17 00:00:00 2001
From: Gabe Black <gabe.black@gmail.com>
Date: Sat, 11 Dec 2021 05:44:56 -0800
Subject: [PATCH 042/757] python: Add a mechanism for installing pybind
 modules.

pybind provides a mechanism for this already, but it assumes that
because it works through static initializers, it must run before the
python interpreter has started. That is not true when gem5 is built as a
library, since its static intitializers won't run until that library is
loaded.

Change-Id: I6f36c5f3831dda893039b4923902e9ce46a91808
Reviewed-on: https://gem5-review.googlesource.com/c/public/gem5/+/54003
Maintainer: Bobby Bruce <bbruce@ucdavis.edu>
Tested-by: kokoro <noreply+kokoro@google.com>
Reviewed-by: Bobby Bruce <bbruce@ucdavis.edu>
Reviewed-on: https://gem5-review.googlesource.com/c/public/gem5/+/54263
---
 src/python/pybind_init.hh | 74 +++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 74 insertions(+)
 create mode 100644 src/python/pybind_init.hh

diff --git a/src/python/pybind_init.hh b/src/python/pybind_init.hh
new file mode 100644
index 0000000..102f3f1
--- /dev/null
+++ b/src/python/pybind_init.hh
@@ -0,0 +1,74 @@
+/*
+ * Copyright 2021 Google, Inc.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef __PYTHON_PYBIND_INIT_HH__
+#define __PYTHON_PYBIND_INIT_HH__
+
+#include <Python.h>
+
+#include "pybind11/pybind11.h"
+
+namespace gem5
+{
+
+struct PybindModuleInit
+{
+    PybindModuleInit(const char *name, PyObject *(*func)())
+    {
+        if (Py_IsInitialized()) {
+            // If python is running, initialize and inject the module.
+            PyImport_AddModule(name);
+            PyObject *sys_modules = PyImport_GetModuleDict();
+            PyDict_SetItemString(sys_modules, name, func());
+        } else {
+            // If not, tell python how to build importer itself later.
+            PyImport_AppendInittab(name, func);
+        }
+    }
+};
+
+} // namespace gem5
+
+#define GEM5_PYBIND_MODULE_INIT(name, func) \
+namespace { \
+ \
+::PyObject * \
+initializer() \
+{ \
+    static ::pybind11::module_::module_def mod_def; \
+    static auto m = ::pybind11::module_::create_extension_module( \
+            #name, nullptr, &mod_def); \
+    func(m); \
+    m.inc_ref(); \
+    return m.ptr(); \
+} \
+ \
+::gem5::PybindModuleInit modInit(#name, initializer); \
+ \
+} // anonymous namespace
+
+#endif // __PYTHON_PYBIND_INIT_HH__
-- 
1.8.3.1

