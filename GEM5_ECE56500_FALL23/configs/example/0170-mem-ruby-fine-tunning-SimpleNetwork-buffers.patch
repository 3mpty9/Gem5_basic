From b476d7c1d3c994a84effa59916b05df3eba9ccfb Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Tiago=20M=C3=BCck?= <tiago.muck@arm.com>
Date: Wed, 30 Sep 2020 16:44:46 -0500
Subject: [PATCH 170/757] mem-ruby: fine tunning SimpleNetwork buffers
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

If physical_vnets_channels is set we adjust the link buffer sizes and
the max_dequeue_rate in order to achieve the expected maximum throughput
assuming a fully pipelined link, i.e., throughput of 1 msg per cycle
per channel (assuming the channels width matches the protocol
logical message size, otherwise maximum throughput may be smaller).

JIRA: https://gem5.atlassian.net/browse/GEM5-920

Change-Id: Id99ab745ed54686d8ffcc630d622fb07ac0fc352
Signed-off-by: Tiago MÃ¼ck <tiago.muck@arm.com>
Reviewed-on: https://gem5-review.googlesource.com/c/public/gem5/+/41863
Reviewed-by: Meatboy 106 <garbage2collector@gmail.com>
Maintainer: Jason Lowe-Power <power.jg@gmail.com>
Tested-by: kokoro <noreply+kokoro@google.com>
---
 src/mem/ruby/network/simple/SimpleLink.py    | 23 ++++++++++++++++++---
 src/mem/ruby/network/simple/SimpleNetwork.py | 30 +++++++++++++++-------------
 2 files changed, 36 insertions(+), 17 deletions(-)

diff --git a/src/mem/ruby/network/simple/SimpleLink.py b/src/mem/ruby/network/simple/SimpleLink.py
index ccf6b92..0497594 100644
--- a/src/mem/ruby/network/simple/SimpleLink.py
+++ b/src/mem/ruby/network/simple/SimpleLink.py
@@ -63,12 +63,29 @@ class SimpleIntLink(BasicIntLink):
         if len(self.buffers) > 0:
             fatal("User should not manually set links' \
                    in_buffers or out_buffers")
-        # Note that all SimpleNetwork MessageBuffers are currently ordered
 
         # The network needs number_of_virtual_networks buffers per
         # in and out port
         buffers = []
         for i in range(int(network.number_of_virtual_networks)):
-            buffers.append(MessageBuffer(ordered = True,
-                                    buffer_size = network.vnet_buffer_size(i)))
+            buffers.append(MessageBuffer(ordered = True))
+
+        # If physical_vnets_channels is set we adjust the buffer sizes and
+        # the max_dequeue_rate in order to achieve the expected thoughput
+        # assuming a fully pipelined link, i.e., throughput of 1 msg per cycle
+        # per channel (assuming the channels width matches the protocol
+        # logical message size, otherwise maximum thoughput may be smaller).
+        # In MessageBuffer, an entry occupied by a dequeued message at cycle
+        # X will available for enqueuing another message at cycle X+1. So
+        # for a 1 cy enqueue latency, 2 entries are needed. For any latency,
+        # the size should be at least latency+1.
+        if len(network.physical_vnets_channels) != 0:
+            assert(len(network.physical_vnets_channels) == \
+                   int(network.number_of_virtual_networks))
+            for i in range(int(network.number_of_virtual_networks)):
+                buffers[i].buffer_size = \
+                    network.physical_vnets_channels[i] * (self.latency + 1)
+                buffers[i].max_dequeue_rate = \
+                    network.physical_vnets_channels[i]
+
         self.buffers = buffers
diff --git a/src/mem/ruby/network/simple/SimpleNetwork.py b/src/mem/ruby/network/simple/SimpleNetwork.py
index 1d4772d..42484a1 100644
--- a/src/mem/ruby/network/simple/SimpleNetwork.py
+++ b/src/mem/ruby/network/simple/SimpleNetwork.py
@@ -63,18 +63,6 @@ class SimpleNetwork(RubyNetwork):
         "Only valid when physical_vnets_channels is set. This overrides the"
         "bandwidth_factor parameter set for the  individual links.")
 
-    def vnet_buffer_size(self, vnet):
-        """
-        Gets the size of the message buffers associated to a vnet
-        If physical_vnets_channels is set we just multiply the size of the
-        buffers as SimpleNetwork does not actually creates multiple physical
-        channels per vnet.
-        """
-        if len(self.physical_vnets_channels) == 0:
-            return self.buffer_size
-        else:
-            return self.buffer_size * self.physical_vnets_channels[vnet]
-
     def setup_buffers(self):
         # Setup internal buffers for links and routers
         for link in self.int_links:
@@ -128,8 +116,22 @@ class Switch(BasicRouter):
                         "Routing strategy to be used")
 
     def setup_buffers(self, network):
+        def vnet_buffer_size(vnet):
+            """
+            Gets the size of the message buffers associated to a vnet
+            If physical_vnets_channels is set we just multiply the size of the
+            buffers as SimpleNetwork does not actually creates multiple phy
+            channels per vnet.
+            """
+            if len(network.physical_vnets_channels) == 0:
+                return network.buffer_size
+            else:
+                return network.buffer_size * \
+                       network.physical_vnets_channels[vnet]
+
         if len(self.port_buffers) > 0:
             fatal("User should not manually set routers' port_buffers")
+
         router_buffers = []
         # Add message buffers to routers at the end of each
         # unidirectional internal link
@@ -137,7 +139,7 @@ class Switch(BasicRouter):
             if link.dst_node == self:
                 for i in range(int(network.number_of_virtual_networks)):
                     router_buffers.append(SwitchPortBuffer(
-                                    buffer_size = network.vnet_buffer_size(i)))
+                                    buffer_size = vnet_buffer_size(i)))
 
         # Add message buffers to routers for each external link connection
         for link in network.ext_links:
@@ -145,6 +147,6 @@ class Switch(BasicRouter):
             if link.int_node == self:
                 for i in range(int(network.number_of_virtual_networks)):
                     router_buffers.append(SwitchPortBuffer(
-                                    buffer_size = network.vnet_buffer_size(i)))
+                                    buffer_size = vnet_buffer_size(i)))
 
         self.port_buffers = router_buffers
-- 
1.8.3.1

